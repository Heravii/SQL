# For this project, I have included all the hackerrank SQL challenges that I have done.


-- Query all columns for all American cities in the CITY table with populations larger than 100000. The CountryCode for America is USA.

SELECT
  *
FROM
  City
WHERE
  countrycode = "USA"
  and population > 100000

-- Query the NAME field for all American cities in the CITY table with populations larger than 120000. The CountryCode for America is USA.

SELECT
  name
FROM
  City
WHERE
  countrycode = "USA" and population > 120000

-- Query all columns (attributes) for every row in the CITY table. 

SELECT *
FROM City

-- Query all columns for a city in CITY with the ID 1661.

SELECT
  *
FROM
  City
WHERE
  id = '1661'

-- Query all attributes of every Japanese city in the CITY table. The COUNTRYCODE for Japan is JPN.

SELECT
  *
FROM
  City
WHERE
  countrycode = 'JPN'

-- Query the names of all the Japanese cities in the CITY table. The COUNTRYCODE for Japan is JPN.

SELECT
  name
FROM
  City
WHERE
  countrycode = 'JPN'

-- Query a list of CITY and STATE from the STATION table.

SELECT
  city,
  state
FROM
  Station

-- Query a list of CITY names from STATION for cities that have an even ID number. Print the results in any order, but exclude duplicates from the answer.

SELECT
  DISTINCT City
FROM
  Station
WHERE
  id % 2 = 0

-- Find the difference between the total number of CITY entries in the table and the number of distinct CITY entries in the table. 

SELECT
  COUNT(city) - COUNT(DISTINCT(city))
FROM
  Station

-- Query the two cities in STATION with the shortest and longest CITY names, as well as their respective LENGTHs (i.e.: number of charaCTErs in the name). If there is more than one smallest or largest city, choose the one that comes first when ordered alphabetically.

SELECT
  CITY,
  LENGTH(CITY)
FROM
  STATION
ORDER BY
  Length(CITY) ASC,
  CITY
LIMIT
  1;
SELECT
  CITY,
  LENGTH(CITY)
FROM
  STATION
ORDER BY
  Length(CITY) DESC,
  CITY
LIMIT
  1;

-- Query the list of CITY names starting with vowels (i.e., a, e, i, o, or u) FROM STATION. Your result cannot contain duplicates.

SELECT 
  DISTINCT(CITY) 
FROM 
  STATION 
WHERE 
  CITY LIKE 'A%' OR CITY LIKE 'E%' OR CITY LIKE 'I%' OR CITY LIKE 'O%' OR CITY LIKE 'U%' 
ORDER BY 
  CITY ASC;

-- Query the list of CITY names ending with vowels (a, e, i, o, u) from STATION. Your result cannot contain duplicates.

SELECT 
  DISTINCT(CITY) 
FROM 
  STATION 
WHERE 
  CITY LIKE '%a' OR CITY LIKE '%e' OR CITY LIKE '%i' OR CITY LIKE '%o' OR CITY LIKE '%u' 
ORDER BY 
  CITY ASC;

-- Query the list of CITY names from STATION which have vowels (i.e., a, e, i, o, and u) as both their first and last characters. Your result cannot contain duplicates.

SELECT 
  DISTINCT CITY 
FROM 
  STATION 
WHERE 
  (CITY LIKE 'A%' OR CITY LIKE 'E%' OR CITY LIKE 'I%' OR CITY LIKE 'O%' OR CITY LIKE 'U%') AND (CITY LIKE '%a' OR CITY LIKE '%e' OR CITY LIKE '%i' OR CITY LIKE '%o' OR CITY LIKE '%u') 
ORDER BY 
  city;

-- Query the list of CITY names from STATION that do not start with vowels. Your result cannot contain duplicates

SELECT 
  DISTINCT CITY 
FROM 
  STATION 
WHERE 
  upper(SUBSTR(CITY,1,1)) NOT IN ('A','E','I','O','U') AND lower(SUBSTR(CITY,1,1)) NOT IN ('a','e','i','o','u');

-- Query the list of CITY names from STATION that do not end with vowels. Your result cannot contain duplicates.

SELECT 
  DISTINCT CITY 
FROM 
  STATION 
WHERE 
  UPPER(SUBSTR(CITY, LENGTH(CITY), 1)) NOT IN ('A','E','I','O','U') AND LOWER(SUBSTR(CITY, LENGTH(CITY),1)) NOT IN ('a','e','i','o','u');

-- Query the list of CITY names from STATION that either do not start with vowels or do not end with vowels. Your result cannot contain duplicates.

SELECT 
  DISTINCT CITY 
FROM 
  STATION 
WHERE 
  LOWER(SUBSTR(CITY,1,1)) NOT IN ('a','e','i','o','u') OR LOWER(SUBSTR(CITY, LENGTH(CITY),1)) NOT IN ('a','e','i','o','u');

-- Query the list of CITY names from STATION that either do not start with vowels and do not end with vowels. Your result cannot contain duplicates.

SELECT 
  DISTINCT CITY 
FROM 
  STATION 
WHERE 
  LOWER(SUBSTR(CITY,1,1)) NOT IN ('a','e','i','o','u') AND LOWER(SUBSTR(CITY,LENGTH(CITY),1)) NOT IN ('a','e','i','o','u');

-- Query the Name of any student in STUDENTS who scored higher than  Marks. Order your output by the last three characters of each name. If two or more students both have names ending in the same last three characters (i.e.: Bobby, Robby, etc.), secondary sort them by ascending ID.

SELECT 
  NAME 
FROM 
  STUDENTS 
WHERE 
  MARKS > 75 
ORDER BY 
  SUBSTR(NAME, LENGTH(NAME)-2, 3), ID;

-- Write a query that prints a list of employee names (i.e.: the name attribute) from the Employee table in alphabetical order.

SELECT 
  name
FROM 
  Employee
ORDER BY 
  1;

-- Write a query that prints a list of employee names (i.e.: the name attribute) for employees in Employee having a salary greater than  per month who have been employees for less than  months. Sort your result by ascending employee_id.

SELECT 
  name 
FROM 
  employee 
WHERE 
  salary > 2000 AND months < 10 
ORDER BY 
  employee_id;

-- Write a query identifying the type of each record in the TRIANGLES table using its three side lengths. Output one of the following statements for each record in the table:

-- - Equilateral: It's a triangle with  sides of equal length.
-- - Isosceles: It's a triangle with  sides of equal length.
-- - Scalene: It's a triangle with  sides of differing lengths.
-- - Not A Triangle: The given values of A, B, and C don't form a triangle.

SELECT 
    CASE 
        WHEN A + B <= C OR A + C <= B OR B + C <= A THEN 'Not A Triangle'
        WHEN A = B AND B = C THEN 'Equilateral'
        WHEN A = B OR B = C OR A = C THEN 'Isosceles'
        ELSE 'Scalene'
    END AS TriangleType
FROM TRIANGLES;

-- Generate the following two result sets:

--Query an alphabetically ordered list of all names in OCCUPATIONS, immediately followed by the first letter of each profession as a parenthetical (i.e.: enclosed in parentheses). For example: AnActorName(A), ADoctorName(D), AProfessorName(P), and ASingerName(S).
--Query the number of ocurrences of each occupation in OCCUPATIONS. Sort the occurrences in ascending order, and output them in the following format: 
  "There are a total of [occupation_count] [occupation]s."
  where [occupation_count] is the number of an occupation in OCCUPATIONS and [occupations] is the lowercase occupation name. If more than one Occupation has the same [occupation_count]. they should be ordered alphabetically.

SELECT 
  CONCAT(NAME,"(",SUBSTR(OCCUPATION,1,1),")") 
FROM 
  OCCUPATIONS 
ORDER BY 
  NAME;

SELECT 
  CONCAT("There are a total of ",COUNT(OCCUPATION)," ",LOWER(OCCUPATION),"s.") 
FROM 
  OCCUPATIONS 
GROUP BY 
  OCCUPATION 
ORDER BY 
  COUNT(OCCUPATION), OCCUPATION; 

-- Pivot the Occupation column in OCCUPATIONS so that each Name is sorted alphabetically and displayed underneath its corresponding Occupation. The output column headers should be Doctor, Professor, Singer, and Actor, respectively.

-- Note: Print NULL when there are no more names corresponding to an occupation.

SELECT 
  MIN(IF(Occupation = 'Doctor',Name,NULL)),MIN(IF(Occupation = 'Professor',Name,NULL)),MIN(IF(Occupation = 'Singer',Name,NULL)),MIN(IF(Occupation = 'Actor',Name,NULL)) 
FROM
  (
    SELECT ROW_NUMBER() OVER(PARTITION BY Occupation
                             ORDER BY Name) AS row_num,
            Name, 
            Occupation
    FROM OCCUPATIONS) AS ord
GROUP BY 
  row_num;

-- Write a query to find the node type of Binary Tree ordered by the value of the node. Output one of the following for each node:

-- Root: If node is root node.
-- Leaf: If node is leaf node.
-- Inner: If node is neither root nor leaf node.

select 
  N,
       if(P is null, 'Root', if((select count(*) from BST where P = B.N)> 0, 'Inner', 'Leaf')) 
from 
  BST as B 
order by 
  N;

-- comp_code, fiunder_name, #lead_mgrs, #senior_mngrs,

select 
  c.company_code, c.founder,
       count(distinct l.lead_manager_code),
       count(distinct s.senior_manager_code),
       count(distinct m.manager_code),
       count(distinct e.employee_code)
from 
  Company as c 
    join Lead_Manager as l 
    on c.company_code = l.company_code
    join Senior_Manager as s
    on l.lead_manager_code = s.lead_manager_code
    join Manager as m 
    on m.senior_manager_code = s.senior_manager_code
    join Employee as e
    on e.manager_code = m.manager_code
group by 
  c.company_code, c.founder
order by 
  c.company_code;

-- Query a count of the number of cities in CITY having a Population larger than .

SELECT 
  COUNT(id)
FROM 
  City
WHERE 
  population > 100000;

-- Query the total population of all cities in CITY where District is California.

SELECT 
  SUM(population)
FROM 
  City
WHERE 
  district='California';

-- Query the average population of all cities in CITY where District is California.

SELECT 
  AVG(population)
FROM 
  City
WHERE 
  district='California';

-- Query the average population for all cities in CITY, rounded down to the nearest

SELECT 
  AVG(population) 
FROM 
  city 
WHERE 
  district = 'California';

-- Query the sum of the populations for all Japanese cities in CITY. The COUNTRYCODE for Japan is JPN.

SELECT 
  ROUND(AVG(Population)) AvgPopulation 
FROM 
  City;

-- Query the difference between the maximum and minimum populations in CITY.

SELECT 
  MAX(Population) - MIN(Population) PopulationDensityDifference 
FROM 
  City;

-- Write a query calculating the amount of error (i.e.:  average monthly salaries), and round it up to the next integer.

SELECT 
  ceil(avg(salary) - avg(replace(salary, '0', ''))) 
FROM 
  employees;

-- Write a query to find the maximum total earnings for all employees as well as the total number of employees who have maximum total earnings. Then print these values as  space-separated integers.

select 
  months*salary, count(*) 
from 
  employee
group by 
  months*salary
order by 
  months*salary desc
limit 
  1;

-- Query the following two values from the STATION table:

-- The sum of all values in LAT_N rounded to a scale of  decimal places.
-- The sum of all values in LONG_W rounded to a scale of  decimal places.

SELECT 
  ROUND(SUM(LAT_N), 2), ROUND(SUM(LONG_W), 2)
FROM 
  Station;

-- Query the sum of Northern Latitudes (LAT_N) from STATION having values greater than 38.7880 and less than 137.2345 . Truncate your answer to  decimal places.

SELECT 
  ROUND(SUM(LAT_N), 4)
FROM 
  Station
WHERE 
  LAT_N BETWEEN 38.7880 AND 137.2345;

-- Query the greatest value of the Northern Latitudes (LAT_N) from STATION that is less than . Truncate your answer to  decimal places.

SELECT 
  ROUND(MAX(LAT_N), 4)
FROM 
  Station
WHERE 
  LAT_N < 137.2345;

-- Query the greatest value of the Northern Latitudes (LAT_N) from STATION that is less than 137.2345 . Truncate your answer to  decimal places.

SELECT 
  ROUND(LONG_W, 4)
FROM     
  Station
WHERE    
  LAT_N < 137.2345
ORDER BY 
  LAT_N DESC
LIMIT    
  1;

-- Query the smallest Northern Latitude (LAT_N) from STATION that is greater than 38.7780. Round your answer to  decimal places.

SELECT   
  ROUND(LAT_N, 4)
FROM    
  Station
WHERE 
  LAT_N > 38.7780
ORDER BY 
  LAT_N 
LIMIT    
  1;

-- Query the Western Longitude (LONG_W)where the smallest Northern Latitude (LAT_N) in STATION is greater than 38.7780. Round your answer to  decimal places.

SELECT 
  ROUND(LONG_W,4)
FROM 
  STATION
WHERE 
  LAT_N = ( SELECT MIN(LAT_N) 
FROM 
  STATION 
WHERE 
  LAT_N > 38.7780);

-- Query the Manhattan Distance between points P1 and P2 and round it to a scale of 4 decimal places.

SELECT 
  Round(Abs(Min(lat_n)-Max(lat_n))
             + Abs(Min(long_w)-Max(long_w)), 4)
FROM  
  station;

-- Query the Euclidean Distance between points P1 and P2 and round it to a scale of 4 decimal places.

SELECT 
  Round(Sqrt(Power(Max(lat_n) - Min(lat_n), 2)
                  + Power(Max(long_w) - Min(long_w), 2)), 4)
FROM   
  station;

-- A median is defined as a number separating the higher half of a data set from the lower half. Query the median of the Northern Latitudes (LAT_N) from STATION and round your answer to  decimal places.

Select 
  round(St.LAT_N,4) mediam 
from 
  station St 
where 
  (select 
    count(Lat_N) 
  from 
    station 
  where 
    Lat_N < St.LAT_N ) 
= 
  (select 
    count(Lat_N) 
  from 
    station 
  where 
    Lat_N > St.LAT_N);

-- Given the CITY and COUNTRY tables, query the sum of the populations of all cities where the CONTINENT is 'Asia'.

SELECT 
  SUM(City.population)
FROM 
  Country
INNER JOIN 
  City
    ON Country.Code = City.CountryCode
WHERE 
  Country.Continent='Asia';

-- Given the CITY and COUNTRY tables, query the names of all cities where the CONTINENT is 'Africa'.

SELECT 
  City.Name 
FROM 
  City, Country 
WHERE 
  City.CountryCode = Country.Code AND Continent = 'Africa' ;

-- Given the CITY and COUNTRY tables, query the names of all the continents (COUNTRY.Continent) and their respective average city populations (CITY.Population) rounded down to the nearest integer.

SELECT 
  Country.Continent, FLOOR(AVG(City.Population))
FROM 
  Country, City 
WHERE 
  Country.Code = City.CountryCode 
GROUP BY 
  Country.Continent;

-- Ketty gives Eve a task to generate a report containing three columns: Name, Grade and Mark. Ketty doesn't want the NAMES of those students who received a grade lower than 8. 
-- The report must be in descending order by grade -- i.e. higher grades are entered first. If there is more than one student with the same grade (8-10) assigned to them, order those particular students by their name alphabetically. 
-- Finally, if the grade is lower than 8, use "NULL" as their name and list them by their grades in descending order.
-- If there is more than one student with the same grade (1-7) assigned to them, order those particular students by their marks in ascending order.
-- Write a query to help Eve.

select
  case 
    when g.grade >= 8 then s.name 
    else NULL
  END AS Names, g.grade, s.marks
from 
  students s
inner join 
  grades g
on  
  g.max_mark >= s.marks and  s.marks  >= g.min_mark
order by 
  g.grade desc,  s.name asc, s.marks asc;

-- Julia just finished conducting a coding contest, and she needs your help assembling the leaderboard! 
-- Write a query to print the respective hacker_id and name of hackers who achieved full scores for more than one challenge. 
-- Order your output in descending order by the total number of challenges in which the hacker earned a full score. If more than one hacker received full scores in same number of challenges, then sort them by ascending hacker_id.

select 
  h.hacker_id, h.name 
from 
  Submissions as s 
join 
    Hackers as h 
  on 
    s.hacker_id = h.hacker_id 
join 
    Challenges as c 
  on 
    s.challenge_id = c.challenge_id
join 
    Difficulty as d 
  on 
    c.Difficulty_level = d.Difficulty_level
where 
  s.score = d.score 
group by 
  h.hacker_id, h.name 
having 
  count(*) > 1
order by 
  count(*) desc, h.hacker_id;

-- Harry Potter and his friends are at Ollivander's with Ron, finally replacing Charlie's old broken wand.
-- Hermione decides the best way to choose is by determining the minimum number of gold galleons needed to buy each non-evil wand of high power and age. 
-- Write a query to print the id, age, coins_needed, and power of the wands that Ron's interested in, sorted in order of descending power. If more than one wand has same power, sort the result in order of descending age.

select 
  w.id, p.age, w.coins_needed, w.power 
from 
  Wands as w 
join 
    Wands_Property as p
  on 
    w.code = p.code
where 
  w.coins_needed = (select 
                      min(coins_needed)
                    from 
                      Wands w2 
                    inner join 
                        Wands_Property p2 
                       on 
                        w2.code = p2.code 
                    where 
                      p2.is_evil = 0 and p.age = p2.age and w.power = w2.power)
order by 
  w.power desc, p.age desc;

-- Julia asked her students to create some coding challenges. 
-- Write a query to print the hacker_id, name, and the total number of challenges created by each student. Sort your results by the total number of challenges in descending order. 
-- If more than one student created the same number of challenges, then sort the result by hacker_id. If more than one student created the same number of challenges and the count is less than the maximum number of challenges created, then exclude those students from the result.

SELECT 
  c.hacker_id, h.name, count(c.challenge_id) AS cnt 
FROM 
  Hackers AS h 
JOIN 
    Challenges AS c 
  ON 
    h.hacker_id = c.hacker_id
GROUP BY 
  c.hacker_id, h.name 
HAVING 
    cnt = (SELECT 
          count(c1.challenge_id) 
        FROM 
          Challenges AS c1 
        GROUP BY 
          c1.hacker_id 
        ORDER BY 
          count(*) desc 
        limit 1) 
  or
    cnt NOT IN (SELECT 
                  count(c2.challenge_id) 
                FROM 
                  Challenges AS c2 
                GROUP BY 
                  c2.hacker_id 
                HAVING 
                  c2.hacker_id <> c.hacker_id)
ORDER BY 
  cnt DESC, c.hacker_id;

-- The total score of a hacker is the sum of their maximum scores for all of the challenges. 
-- Write a query to print the hacker_id, name, and total score of the hackers ordered by the descending score. If more than one hacker achieved the same total score, then sort the result by ascending hacker_id. 
-- Exclude all hackers with a total score of 0 from your result.

select 
  m.hacker_id, h.name, sum(score) as total_score 
from
  (select 
    hacker_id, challenge_id, max(score) as score
  from 
    Submissions 
  group by 
    hacker_id, challenge_id) as m
join 
    Hackers as h
  on 
    m.hacker_id = h.hacker_id
group by 
  m.hacker_id, h.name
having 
  total_score > 0
order by 
  total_score desc, m.hacker_id;

-- If the End_Date of the tasks are consecutive, then they are part of the same project. Samantha is interested in finding the total number of different projects completed.
-- Write a query to output the start and end dates of projects listed by the number of days it took to complete the project in ascending order. 
-- If there is more than one project that have the same number of completion days, then order by the start date of the project.

SELECT 
  Start_Date, min(End_Date)
FROM 
   (SELECT 
      Start_Date 
    FROM 
      Projects 
    WHERE 
      Start_Date NOT IN (SELECT 
                          End_Date 
                        FROM 
                          Projects)) 
  a ,
    (SELECT 
      End_Date 
    FROM 
      Projects 
    WHERE 
      End_Date NOT IN (SELECT 
                        Start_Date 
                      FROM 
                        Projects)) 
  b
WHERE 
  Start_Date < End_Date
GROUP BY 
  Start_Date
ORDER BY 
  DATEDIFF(min(End_Date), Start_Date) ASC, Start_Date ASC;

-- Write a query to output the names of those students whose best friends got offered a higher salary than them. 
-- Names must be ordered by the salary amount offered to the best friends. 
-- It is guaranteed that no two students got same salary offer.

Select S.Name
From ( Students S join Friends F Using(ID)
       join Packages P1 on S.ID=P1.ID
       join Packages P2 on F.Friend_ID=P2.ID)
Where    P2.Salary > P1.Salary
Order By P2.Salary;

-- Two pairs (X1, Y1) and (X2, Y2) are said to be symmetric pairs if X1 = Y2 and X2 = Y1.
-- Write a query to output all such symmetric pairs in ascending order by the value of X. List the rows such that X1 ≤ Y1.

SELECT f1.X, f1.Y FROM Functions AS f1 
WHERE f1.X = f1.Y AND
(SELECT COUNT(*) FROM Functions WHERE X = f1.X AND Y = f1.Y) > 1
UNION
SELECT f1.X, f1.Y from Functions AS f1
WHERE EXISTS(SELECT X, Y FROM Functions WHERE f1.X = Y AND f1.Y = X AND f1.X < X)
ORDER BY X;

-- Write a query to print the contest_id, hacker_id, name, and the sums of total_submissions, total_accepted_submissions, total_views, and total_unique_views for each contest sorted by contest_id. Exclude the contest from the result if all four sums are 0.

SELECT con.contest_id, con.hacker_id, con.name, SUM(sg.total_submissions), SUM(sg.total_accepted_submissions),
SUM(vg.total_views), SUM(vg.total_unique_views)
FROM Contests AS con 
JOIN Colleges AS col
ON con.contest_id = col.contest_id
JOIN Challenges AS cha 
ON cha.college_id = col.college_id
LEFT JOIN
(SELECT ss.challenge_id, SUM(ss.total_submissions) AS total_submissions, SUM(ss.total_accepted_submissions) AS total_accepted_submissions FROM 
Submission_Stats AS ss GROUP BY ss.challenge_id) AS sg
ON cha.challenge_id = sg.challenge_id
LEFT JOIN
(SELECT vs.challenge_id, SUM(vs.total_views) AS total_views, SUM(total_unique_views) AS total_unique_views FROM View_Stats AS vs GROUP BY vs.challenge_id) AS vg
ON cha.challenge_id = vg.challenge_id
GROUP BY con.contest_id, con.hacker_id, con.name
HAVING SUM(sg.total_submissions)+
       SUM(sg.total_accepted_submissions)+
       SUM(vg.total_views)+
       SUM(vg.total_unique_views) > 0
ORDER BY con.contest_id;

-- Julia conducted a  days of learning SQL contest. The start date of the contest was March 01, 2016 and the end date was March 15, 2016.
-- Write a query to print total number of unique hackers who made at least  submission each day (starting on the first day of the contest), and find the hacker_id and name of the hacker who made maximum number of submissions each day. 
-- If more than one such hacker has a maximum number of submissions, print the lowest hacker_id. The query should print this information for each day of the contest, sorted by the date.

SELECT SUBMISSION_DATE,
(SELECT COUNT(DISTINCT HACKER_ID)  
 FROM SUBMISSIONS S2  
 WHERE S2.SUBMISSION_DATE = S1.SUBMISSION_DATE AND    
(SELECT COUNT(DISTINCT S3.SUBMISSION_DATE) 
 FROM SUBMISSIONS S3 WHERE S3.HACKER_ID = S2.HACKER_ID AND S3.SUBMISSION_DATE < S1.SUBMISSION_DATE) = DATEDIFF(S1.SUBMISSION_DATE , '2016-03-01')),
(SELECT HACKER_ID FROM SUBMISSIONS S2 WHERE S2.SUBMISSION_DATE = S1.SUBMISSION_DATE 
GROUP BY HACKER_ID ORDER BY COUNT(SUBMISSION_ID) DESC, HACKER_ID LIMIT 1) AS TMP,
(SELECT NAME FROM HACKERS WHERE HACKER_ID = TMP)
FROM
(SELECT DISTINCT SUBMISSION_DATE FROM SUBMISSIONS) S1
GROUP BY SUBMISSION_DATE;

-- P(R) represents a pattern drawn by Julia in R rows. The following pattern represents P(5):
-- Write a query to print the pattern P(20).

SET @number = 21;
SELECT REPEAT('* ', @number := @number - 1)
FROM information_schema.tables
LIMIT 20;

-- P(R) represents a pattern drawn by Julia in R rows. The following pattern represents P(5):
-- Write a query to print the pattern P(20).

SET @number = 0;
SELECT REPEAT('* ', @number := @number+1)
FROM information_schema.tables
LIMIT 20;

-- Write a query to print all prime numbers less than or equal to . Print your result on a single line, and use the ampersand () character as your separator (instead of a space).
-- For example, the output for all prime numbers  would be: 2&3&5&7

SELECT GROUP_CONCAT(NUMB SEPARATOR '&')
FROM (
    SELECT @num:=@num+1 as NUMB FROM
    information_schema.tables t1,
    information_schema.tables t2,
    (SELECT @num:=1) tmp
) tempNum
WHERE NUMB<=1000 AND NOT EXISTS(
        SELECT * FROM (
            SELECT @nu:=@nu+1 as NUMA FROM
                information_schema.tables t1,
                information_schema.tables t2,
                (SELECT @nu:=1) tmp1
                LIMIT 1000
            ) tatata
        WHERE FLOOR(NUMB/NUMA)=(NUMB/NUMA) AND NUMA<NUMB AND NUMA>1
    )

